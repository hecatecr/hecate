# Task ID: 5
# Title: Build SourceMap Registry
# Status: pending
# Dependencies: 3, 4
# Priority: high
# Description: Implement thread-safe SourceMap for managing multiple source files with ID generation and retrieval
# Details:
Create src/hecate/core/source_map.cr:
```crystal
require "mutex"

module Hecate::Core
  class SourceMap
    @sources = {} of UInt32 => SourceFile
    @paths = {} of String => UInt32
    @next_id = 1_u32
    @mutex = Mutex.new
    
    def add_file(path : String, contents : String) : UInt32
      @mutex.synchronize do
        return @paths[path] if @paths.has_key?(path)
        
        id = @next_id
        @next_id += 1
        
        source = SourceFile.new(id, path, contents)
        @sources[id] = source
        @paths[path] = id
        id
      end
    end
    
    def add_virtual(name : String, contents : String) : UInt32
      add_file("<#{name}>", contents)
    end
    
    def get(id : UInt32) : SourceFile?
      @mutex.synchronize { @sources[id]? }
    end
    
    def span_to_position(span : Span) : {Position, Position}?
      # Implementation using SourceFile's byte_to_position
    end
  end
end
```

# Test Strategy:
Test concurrent file additions using spawn/channel, verify unique ID generation, test path deduplication, validate span-to-position conversions across files

# Subtasks:
## 1. Implement Core SourceMap Structure [pending]
### Dependencies: None
### Description: Create the basic SourceMap class with thread-safe storage for source files and path mappings
### Details:
Implement the SourceMap class skeleton with @sources hash for storing SourceFile instances by ID, @paths hash for path-to-ID mapping, @next_id counter starting at 1, and @mutex for thread safety. Include proper initialization and basic structure without method implementations.

## 2. Implement add_file Method [pending]
### Dependencies: 5.1
### Description: Add thread-safe method to register new source files with automatic ID generation and path deduplication
### Details:
Implement add_file(path, contents) that checks if path already exists in @paths, returns existing ID if found, otherwise generates new ID, creates SourceFile instance, updates both @sources and @paths hashes, and returns the ID. All operations must be wrapped in @mutex.synchronize block.

## 3. Implement add_virtual and get Methods [pending]
### Dependencies: 5.2
### Description: Add methods for virtual file handling and safe retrieval of source files by ID
### Details:
Implement add_virtual(name, contents) that wraps the name in angle brackets and delegates to add_file. Implement get(id) that safely retrieves a SourceFile by ID within mutex synchronization, returning nil if not found.

## 4. Implement span_to_position Method [pending]
### Dependencies: 5.3
### Description: Convert Span objects to start/end Position pairs using the underlying SourceFile
### Details:
Implement span_to_position(span) that retrieves the SourceFile using span.source_id, returns nil if file not found, uses SourceFile's byte_to_position method to convert span.start and span.end byte offsets to Position objects, and returns a tuple of {start_position, end_position}.

## 5. Add Iterator and Utility Methods [pending]
### Dependencies: 5.4
### Description: Implement methods for iterating over sources and retrieving file information
### Details:
Add each_source method that yields each SourceFile with thread safety, size method returning count of registered files, has_file?(path) checking if path is registered, and clear method to reset the registry (useful for testing). All methods must be thread-safe.

