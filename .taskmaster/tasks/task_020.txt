# Task ID: 20
# Title: Setup Release Automation
# Status: pending
# Dependencies: 1, 19
# Priority: low
# Description: Create release tooling for automated subtree mirroring and coordinated shard publishing
# Details:
Create tools/release.rb:
```ruby
#!/usr/bin/env ruby
require 'json'
require 'fileutils'

class ReleaseManager
  SHARDS = %w[hecate-core hecate-lex]
  
  def initialize
    @root = File.expand_path('../..', __FILE__)
  end
  
  def release(shard, version)
    validate_shard!(shard)
    validate_version!(version)
    
    puts "Releasing #{shard} v#{version}..."
    
    # Update version in shard.yml
    update_shard_version(shard, version)
    
    # Update VERSION constant
    update_version_constant(shard, version)
    
    # Run tests
    run_tests(shard)
    
    # Create git tag
    create_tag(shard, version)
    
    # Push subtree to mirror
    push_subtree(shard)
    
    puts "Released #{shard} v#{version} successfully!"
  end
  
  private
  
  def push_subtree(shard)
    remote = "git@github.com:hecatecr/#{shard}.git"
    subtree_path = "shards/#{shard}"
    
    system("git subtree push --prefix=#{subtree_path} #{remote} main") ||
      raise("Failed to push subtree")
  end
end

if ARGV.length != 2
  puts "Usage: release.rb <shard> <version>"
  exit 1
end

ReleaseManager.new.release(ARGV[0], ARGV[1])
```

Set up GitHub Actions for automated releases on version tags.

# Test Strategy:
Test release script in dry-run mode, verify subtree push works correctly, ensure version updates are consistent

# Subtasks:
## 1. Create Release Manager Core [pending]
### Dependencies: None
### Description: Implement the core ReleaseManager class with basic structure and validation methods
### Details:
Create tools/release.rb with ReleaseManager class structure. Implement validate_shard! to check if shard exists in SHARDS array. Implement validate_version! to ensure version follows semantic versioning format (X.Y.Z). Add error handling for invalid inputs. Include basic file path setup with @root instance variable.

## 2. Implement Version Update Methods [pending]
### Dependencies: 20.1
### Description: Add methods to update version in shard.yml files and VERSION constants in source code
### Details:
Implement update_shard_version method to parse and update version field in shard.yml using YAML. Implement update_version_constant to find and update VERSION = "X.Y.Z" in main source files. Handle different quote styles and spacing. Add rollback capability if updates fail. Ensure atomic updates across all version locations.

## 3. Add Test Runner and Git Operations [pending]
### Dependencies: 20.2
### Description: Implement test execution and git tagging functionality for releases
### Details:
Implement run_tests method to execute crystal spec in shard directory. Add proper error handling and output capture. Implement create_tag method to create git tags in format 'shard-name/vX.Y.Z'. Add checks for existing tags. Implement commit creation for version updates. Ensure all git operations are atomic.

## 4. Implement Subtree Push and Dry Run [pending]
### Dependencies: 20.3
### Description: Add subtree mirroring functionality and dry-run mode for safe testing
### Details:
Complete push_subtree method with proper remote URL construction. Add dry-run mode flag to simulate releases without making changes. Implement logging system to show what would be done. Add support for custom remote URLs via configuration. Implement rollback for failed subtree pushes. Add progress indicators for long operations.

## 5. Create GitHub Actions Workflow [pending]
### Dependencies: 20.4
### Description: Set up automated CI/CD workflow for releases triggered by version tags
### Details:
Create .github/workflows/release.yml workflow. Trigger on push of tags matching 'hecate-*/v*'. Set up Crystal environment with shards installation. Run release.rb script automatically. Add GitHub release creation with changelogs. Configure secrets for GitHub token access. Add matrix strategy for releasing multiple shards. Include notification system for release status.

